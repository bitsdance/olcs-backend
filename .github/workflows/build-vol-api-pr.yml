name: Test, lint and build vol-api Image
run-name: Test, lint and build vol-api Image 

on:
  push:
    branches:
    - AWSRESET1-313

jobs:
  security:
    uses: dvsa/.github/.github/workflows/php-security.yml@main
    secrets:
      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  static-analysis:
    uses: dvsa/.github/.github/workflows/php-static.yml@main
    with:
      php-version: '7.4'

  tests:
    uses: dvsa/.github/.github/workflows/php-tests.yml@main
    with:
      php-versions: "[\"7.4\"]"
      fail-fast: false

  vol-api-image-build:
    runs-on: ubuntu-latest

    env:
      AWS_REGION :  ${{ vars.DVSA_AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.VOL_AWS_ACCOUNT_TOOLING_NONPROD }}

    permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read    # This is required for actions/checkout

    

    steps:
    - uses: actions/checkout@v3

    - name: Get branch name
      id: branch
      run: echo "::set-output name=branch::$(git rev-parse --abbrev-ref HEAD)"

    ##create s3 bucket in vol-non-prod tooling and vol-prod tooling to get the composer
    - name: Download the compose file 
      run: |
        php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
        php composer-setup.php --install-dir=/usr/local/bin --filename=composer
        php -r "unlink('composer-setup.php');"

    - name: install composer dependency
      run: |
        php composer.phar install --optimize-autoloader --no-interaction --no-dev

    - name: Build application
      run: |
       date > config/version
       git describe --all >> config/version
       tar cvzf backend.tar.gz --exclude=config/autoload/local.php --exclude=config/autoload/local.php.dist composer.lock init_autoloader.php config module public data/autoload data/cache vendor
    
    #upload the tar as artifact on github workflow 

    - name: Lint check on dockerfile
      run: docker run --rm --privileged -v `pwd`:/root/ projectatomic/dockerfile-lint dockerfile_lint -f dockerfile

    - name: Set IMAGE_TAG
      run: | 
        IMAGE_SHA=$(echo $GITHUB_SHA | cut -c 1-6)
        echo "IMAGE_TAG=vol-api-$IMAGE_SHA" >> $GITHUB_ENV
  
    - name: Set up Notation CLI
      run: |
        wget https://d2hvyiie56hcat.cloudfront.net/linux/amd64/installer/deb/latest/aws-signer-notation-cli_amd64.deb
        sudo dpkg -i aws-signer-notation-cli_amd64.deb
        notation version
        notation plugin ls

    - name: Configure AWS credentials from Test account
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume:  ${{ secrets.DEV_AWS_ROLE }}
        aws-region: eu-west-1
        role-session-name: GitHub_to_AWS_via_FederatedOIDC

    - name: Login to Shared Core ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build the Docker image
      run: |
        docker build -t ${{ secrets.ECR_BASE_URL }}:$IMAGE_TAG -f dockerfile . 

    - name: Snyk scan api image
      id: scan-api-image
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: ${{ secrets.ECR_BASE_URL }}:$IMAGE_TAG
        args: --file=dockerfile
      continue-on-error: true